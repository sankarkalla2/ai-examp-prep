generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  subjects      Subject[]
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Subscription Subscription?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Subject {
  id          String            @id @default(cuid())
  name        String
  characters  Int?
  title       String
  description String?
  analytics   SubjectAnalytics?
  mcqs        MCQ[]
  type        SubjectType
  questions   Question[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  User        User              @relation(fields: [userId], references: [id])
  userId      String
  SubjectFile SubjectFile[]

  Exam Exam[]
}

enum SubjectType {
  SYLLABUS
  MATERIALS
}

model Exam {
  id         String     @id @default(cuid())
  subjectId  String
  subject    Subject    @relation(fields: [subjectId], references: [id])
  mcqs       MCQ[]
  isFinished Boolean    @default(false)
  score      Int?
  questions  Question[]
  type       ExamType
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum ExamType {
  MCQ
  INPUT_QUESTION
}

model SubjectAnalytics {
  id        String @id @default(cuid())
  subjectId String @unique
  mcqs      Int    @default(0)
  questions Int    @default(0)

  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
}

model SubjectFile {
  id        String  @id @default(cuid())
  subjectId String
  fileKey   String
  order     Int
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
}

model MCQ {
  id          String             @id @default(cuid())
  question    String
  options     String[] // Array of possible answers
  answer      String // Correct answer
  explanation String? // Optional explanation
  subject     Subject            @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId   String
  answered    String?
  category    String?
  difficulty  QuestionDifficulty
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  Exam        Exam?              @relation(fields: [examId], references: [id])
  examId      String?
}

model Question {
  id          String             @id @default(cuid())
  question    String
  answer      String?
  explanation String?
  difficulty  QuestionDifficulty
  subject     Subject            @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId   String
  category    String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  Exam        Exam?              @relation(fields: [examId], references: [id])
  examId      String?
}

model Subscription {
  id        String           @id @default(cuid())
  userId    String           @unique
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan      SubscriptionPlan
  credits   Int              @default(0)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

enum SubscriptionPlan {
  FREE
  PRO
}
